Package files
*************

This page describe the files generated by PID for each package, i.e. what information the file holds and when it is generated during the package lifecycle.

.. _package reference file:

Reference file
--------------

A reference file is a PID specific cmake script file provided for any kind of deployment unit: native packages, external package wrappers, frameworks and environments.
It defines the meta information about the deployment unit, the most important being where to find it online.

About names of references files:
 - for native packages the pattern name is Refer<package name>.cmake
 - for external packages the pattern name is ReferExternal<package name>.cmake
 - for frameworks the pattern name is ReferFramework<framework name>.cmake
 - for environment the pattern name is ReferEnvironment<environment name>.cmake

Reference file, as any shared information in a pid-workspace are located into **contribution spaces**. More precisely they can be found in contribution spaces `references` subfolder.
For instance you can find the reference file for package `pid-rpath` in the official contribution space of PID (called `pid`) in `<worskpace>/contributions/pid/references`.


As an example here is the reference file of package `pid-rpath`(`Referpid-rpath.cmake`):

.. code-block:: cmake

  set(pid-rpath_MAIN_AUTHOR _Robin_Passama CACHE INTERNAL "")
  set(pid-rpath_MAIN_INSTITUTION _LIRMM CACHE INTERNAL "")
  set(pid-rpath_CONTACT_MAIL passama@lirmm.fr CACHE INTERNAL "")
  set(pid-rpath_FRAMEWORK pid CACHE INTERNAL "")
  set(pid-rpath_SITE_ROOT_PAGE  CACHE INTERNAL "")
  set(pid-rpath_PROJECT_PAGE https://gite.lirmm.fr/pid/pid-rpath CACHE INTERNAL "")
  set(pid-rpath_SITE_GIT_ADDRESS  CACHE INTERNAL "")
  set(pid-rpath_SITE_INTRODUCTION pid-rpath;is;a;package;providing;a;little;API;to;ease;the;management;of;runtime;resources;within;a;PID;workspace.;Runtime;resources;may;be;either;configuration;files,;executables;or;module;libraries.;Its;usage;is;completely;bound;to;the;use;of;PID;system. CACHE INTERNAL "")
  set(pid-rpath_AUTHORS_AND_INSTITUTIONS "_Robin_Passama(_LIRMM);_Benjamin_Navarro(_LIRMM)" CACHE INTERNAL "")
  set(pid-rpath_DESCRIPTION "Default package of PID, used to manage runtime path of executables" CACHE INTERNAL "")
  set(pid-rpath_YEARS 2015 CACHE INTERNAL "")
  set(pid-rpath_LICENSE CeCILL-C CACHE INTERNAL "")
  set(pid-rpath_ADDRESS git@gite.lirmm.fr:pid/pid-rpath.git CACHE INTERNAL "")
  set(pid-rpath_PUBLIC_ADDRESS https://gite.lirmm.fr/pid/pid-rpath.git CACHE INTERNAL "")
  set(pid-rpath_CATEGORIES "programming/resources_management" CACHE INTERNAL "")
  set(pid-rpath_REFERENCES  CACHE INTERNAL "")

There are meta informations about the package, for instance its license, its authors or the URLs of its documentation website and project site.
The most important informations are:

.. code-block:: cmake

  set(pid-rpath_ADDRESS git@gite.lirmm.fr:pid/pid-rpath.git CACHE INTERNAL "")
  set(pid-rpath_PUBLIC_ADDRESS https://gite.lirmm.fr/pid/pid-rpath.git CACHE INTERNAL "")

That define the private address of package git repository (the one used by developers to push/pull content) and its public counterpart (used by the other to clone the project via http if the repository has been made public).

.. code-block:: cmake

  set(pid-rpath_FRAMEWORK pid CACHE INTERNAL "")
  set(pid-rpath_SITE_ROOT_PAGE  CACHE INTERNAL "")
  set(pid-rpath_REFERENCES  CACHE INTERNAL "")

That define where to find binary archives for the package. For the `pid-rpath` package, the binary archives are provided undirectly through a framework (`pid-rpath_FRAMEWORK`).
If package belong to no framework a lone static site providing documentation and binary archives for that package can be used (`pid-rpath_SITE_ROOT_PAGE`).
Finally, when first two solution have not be chosen, it is also possible to directly define the url of the binary archives using `pid-rpath_REFERENCES`.

The reference file is generated by framework, environment native package or external package wrapper projects, from their CMake description only on demand.

It is used by PID mechanism whenever a deployment unit needs to be deployed in the local workspace on user workstation.

.. _package find file:

Find file
---------

A find file is a quite common type of file in CMake. These are the files managed by call to `find_package` CMake command, used to find on local filesystem the content of projects used by a CMake project (libraries, executable, compiler options, etc.) and check if their versions match the required ones.
These files are also used to populate CMake variables that will be used to configure the generated libraries and executables.
In PID, find files are used for same purpose either for native or external packages.
The main difference is that they are generated respectively by packages and wrappers projects.

Find file, as any shared information in a pid-workspace are located into **contribution spaces**.
More precisely they can be found in contribution spaces `finds` subfolder.
For instance you can find the find file for package `pid-rpath` in the official contribution space of PID (called `pid`) in `<worskpace>/contributions/pid/finds`.

Here is an example of a find file for the native project `pid-rpath` (`Findpid-rpath.cmake`):

.. code-block:: cmake

  set(pid-rpath_PID_KNOWN_VERSION 0.0.0;0.1.0;0.2.0;0.3.0;0.4.0;0.4.1;0.5.0;0.5.1;0.5.2;0.6.0;0.7.0;0.7.1;1.0.0;1.0.1;2.0.0;2.0.1;2.0.2;2.0.3;2.0.4;2.1.0;2.1.1;2.1.2;2.1.3;2.1.4;2.1.5;2.2.0)
  finding_Package(pid-rpath)

Quite simple: all the job is done by the function `finding_Package(pid-rpath)` defined in PID.
The first `set` instruction is only used to reference all realease versions of the package.

For the external package `á»³aml-cpp` (file `Findyaml-cpp.cmake`):

.. code-block:: cmake

  set(yaml-cpp_PID_KNOWN_VERSION 0.5.1;0.5.3;0.6.2)
  finding_External_Package(yaml-cpp)

Same principle but the find file for an external package also must provide known versions of the external package into PID WITH compatibility between versions (here known versions of `yaml-cpp` are not compatible).
Indeed each external project follows its own versionning rules and no asumption can be made on compatibility between these versions.


The find file of a package is generated by native package or external package wrapper projects, from their CMake description, any time the project is configured. It is installed in the workspace after each build.


.. _package use file:

Use file
--------

A use file is a PID specific cmake script file provided for native and external packages. It contains the complete information about a given version of a package installed in the workspace, and built for a given target platform.
This information is used by other packages in order to configure their own build process.
Any use file is located in `share` subfolder of the package version folder in install tree.
The name of a use file follows the pattern: Use<package name>-<version>.cmake.


As a simple example here is the use file of the native package pid-rpath:

.. code-block:: cmake

  ######### declaration of package meta info that can be usefull for other packages ########
  set(pid-rpath_LICENSE CeCILL-C CACHE INTERNAL "")
  set(pid-rpath_ADDRESS git@gite.lirmm.fr:pid/pid-rpath.git CACHE INTERNAL "")
  set(pid-rpath_PUBLIC_ADDRESS https://gite.lirmm.fr/pid/pid-rpath.git CACHE INTERNAL "")
  set(pid-rpath_CATEGORIES programming/resources_management CACHE INTERNAL "")
  ######### declaration of package web site info ########
  set(pid-rpath_FRAMEWORK pid CACHE INTERNAL "")
  set(pid-rpath_PROJECT_PAGE https://gite.lirmm.fr/pid/pid-rpath CACHE INTERNAL "")
  set(pid-rpath_SITE_ROOT_PAGE  CACHE INTERNAL "")
  set(pid-rpath_SITE_GIT_ADDRESS  CACHE INTERNAL "")
  set(pid-rpath_SITE_INTRODUCTION pid-rpath;is;a;package;providing;a;little;API;to;ease;the;management;of;runtime;resources;within;a;PID;workspace.;Runtime;resources;may;be;either;configuration;files,;executables;or;module;libraries.;Its;usage;is;completely;bound;to;the;use;of;PID;system. CACHE INTERNAL "")
  ######### declaration of package development info ########
  set(pid-rpath_DEVELOPMENT_STATE release CACHE INTERNAL "")
  ######### declaration of package components ########
  set(pid-rpath_COMPONENTS rpathlib;rpath-example;rpath-crash-example;check-macros-ok;check-macros-ko CACHE INTERNAL "")
  set(pid-rpath_COMPONENTS_APPS rpath-example;rpath-crash-example;check-macros-ok;check-macros-ko CACHE INTERNAL "")
  set(pid-rpath_COMPONENTS_LIBS rpathlib CACHE INTERNAL "")
  set(pid-rpath_COMPONENTS_SCRIPTS  CACHE INTERNAL "")
  ####### internal specs of package components #######
  set(pid-rpath_rpathlib_TYPE SHARED CACHE INTERNAL "")
  set(pid-rpath_rpathlib_HEADER_DIR_NAME rpathlib CACHE INTERNAL "")
  set(pid-rpath_rpathlib_HEADERS pid/rpath_resolver.h;pid/rpath.h;pid/pid_path.h CACHE INTERNAL "")
  set(pid-rpath_rpath-example_TYPE EXAMPLE CACHE INTERNAL "")
  set(pid-rpath_rpath-crash-example_TYPE EXAMPLE CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_TYPE TEST CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_TYPE TEST CACHE INTERNAL "")
  #### declaration of platform dependencies in Release mode ####
  set(pid-rpath_PLATFORM x86_64_linux_stdc++11 CACHE INTERNAL "")
  set(pid-rpath_PLATFORM_CONFIGURATIONS posix CACHE INTERNAL "")
  #### declaration of external package dependencies in Release mode ####
  set(pid-rpath_EXTERNAL_DEPENDENCIES boost CACHE INTERNAL "")
  set(pid-rpath_EXTERNAL_DEPENDENCY_boost_VERSION 1.55.0 CACHE INTERNAL "")
  set(pid-rpath_EXTERNAL_DEPENDENCY_boost_VERSION_EXACT TRUE CACHE INTERNAL "")
  set(pid-rpath_EXTERNAL_DEPENDENCY_boost_COMPONENTS  CACHE INTERNAL "")
  #### declaration of package dependencies in Release mode ####
  set(pid-rpath_DEPENDENCIES pid-benchmark-for-tests CACHE INTERNAL "")
  set(pid-rpath_DEPENDENCY_pid-benchmark-for-tests_VERSION 0.3 CACHE INTERNAL "")
  set(pid-rpath_DEPENDENCY_pid-benchmark-for-tests_VERSION_EXACT TRUE CACHE INTERNAL "")
  set(pid-rpath_DEPENDENCY_pid-benchmark-for-tests_COMPONENTS  CACHE INTERNAL "")
  #### declaration of components exported flags and binary in Release mode ####
  set(pid-rpath_rpathlib_BINARY_NAME librpathlib.so CACHE INTERNAL "")
  set(pid-rpath_rpathlib_INC_DIRS  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_OPTS  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_DEFS  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_LINKS  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_PRIVATE_LINKS <boost>/lib/libboost_system.so.1.55.0;<boost>/lib/libboost_filesystem.so.1.55.0 CACHE INTERNAL "")
  set(pid-rpath_rpathlib_C_STANDARD 90 CACHE INTERNAL "")
  set(pid-rpath_rpathlib_CXX_STANDARD 98 CACHE INTERNAL "")
  set(pid-rpath_rpathlib_RUNTIME_RESOURCES  CACHE INTERNAL "")
  set(pid-rpath_rpath-example_BINARY_NAME rpath-example CACHE INTERNAL "")
  set(pid-rpath_rpath-example_RUNTIME_RESOURCES test-pid-rpath.txt;pid-rpath-test-dir CACHE INTERNAL "")
  set(pid-rpath_rpath-crash-example_BINARY_NAME rpath-crash-example CACHE INTERNAL "")
  set(pid-rpath_rpath-crash-example_RUNTIME_RESOURCES pid-rpath-test-dir CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_BINARY_NAME check-macros-ok CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_RUNTIME_RESOURCES test-pid-rpath.txt;pid-rpath-test-dir CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_BINARY_NAME check-macros-ko CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_RUNTIME_RESOURCES test-pid-rpath.txt;pid-rpath-test-dir CACHE INTERNAL "")
  #### declaration package internal component dependencies in Release mode ####
  set(pid-rpath_rpath-example_INTERNAL_DEPENDENCIES rpathlib CACHE INTERNAL "")
  set(pid-rpath_rpath-example_INTERNAL_EXPORT_rpathlib FALSE CACHE INTERNAL "")
  set(pid-rpath_rpath-crash-example_INTERNAL_DEPENDENCIES rpathlib CACHE INTERNAL "")
  set(pid-rpath_rpath-crash-example_INTERNAL_EXPORT_rpathlib FALSE CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_INTERNAL_DEPENDENCIES rpathlib CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_INTERNAL_EXPORT_rpathlib FALSE CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_INTERNAL_DEPENDENCIES rpathlib CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_INTERNAL_EXPORT_rpathlib FALSE CACHE INTERNAL "")
  #### declaration of component dependencies in Release mode ####
  set(pid-rpath_check-macros-ok_DEPENDENCIES pid-benchmark-for-tests CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_DEPENDENCY_pid-benchmark-for-tests_COMPONENTS pid-benchmark-sh CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_EXPORT_pid-benchmark-for-tests_pid-benchmark-sh FALSE CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_DEPENDENCIES pid-benchmark-for-tests CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_DEPENDENCY_pid-benchmark-for-tests_COMPONENTS pid-benchmark-sh CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_EXPORT_pid-benchmark-for-tests_pid-benchmark-sh FALSE CACHE INTERNAL "")
  #### declaration of platform dependencies in Debug mode ####
  set(pid-rpath_PLATFORM_DEBUG x86_64_linux_stdc++11 CACHE INTERNAL "")
  set(pid-rpath_PLATFORM_CONFIGURATIONS_DEBUG posix CACHE INTERNAL "")
  #### declaration of external package dependencies in Debug mode ####
  set(pid-rpath_EXTERNAL_DEPENDENCIES_DEBUG boost CACHE INTERNAL "")
  set(pid-rpath_EXTERNAL_DEPENDENCY_boost_VERSION_DEBUG 1.55.0 CACHE INTERNAL "")
  set(pid-rpath_EXTERNAL_DEPENDENCY_boost_VERSION_EXACT_DEBUG TRUE CACHE INTERNAL "")
  set(pid-rpath_EXTERNAL_DEPENDENCY_boost_COMPONENTS_DEBUG  CACHE INTERNAL "")
  #### declaration of package dependencies in Debug mode ####
  set(pid-rpath_DEPENDENCIES_DEBUG pid-benchmark-for-tests CACHE INTERNAL "")
  set(pid-rpath_DEPENDENCY_pid-benchmark-for-tests_VERSION_DEBUG 0.3 CACHE INTERNAL "")
  set(pid-rpath_DEPENDENCY_pid-benchmark-for-tests_VERSION_EXACT_DEBUG TRUE CACHE INTERNAL "")
  set(pid-rpath_DEPENDENCY_pid-benchmark-for-tests_COMPONENTS_DEBUG  CACHE INTERNAL "")
  #### declaration of components exported flags and binary in Debug mode ####
  set(pid-rpath_rpathlib_BINARY_NAME_DEBUG librpathlib-dbg.so CACHE INTERNAL "")
  set(pid-rpath_rpathlib_INC_DIRS_DEBUG  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_OPTS_DEBUG  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_DEFS_DEBUG  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_LINKS_DEBUG  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_PRIVATE_LINKS_DEBUG <boost>/lib/libboost_system.so.1.55.0;<boost>/lib/libboost_filesystem.so.1.55.0 CACHE INTERNAL "")
  set(pid-rpath_rpathlib_C_STANDARD_DEBUG 90 CACHE INTERNAL "")
  set(pid-rpath_rpathlib_CXX_STANDARD_DEBUG 98 CACHE INTERNAL "")
  set(pid-rpath_rpathlib_RUNTIME_RESOURCES_DEBUG  CACHE INTERNAL "")
  set(pid-rpath_rpath-example_BINARY_NAME_DEBUG rpath-example-dbg CACHE INTERNAL "")
  set(pid-rpath_rpath-example_RUNTIME_RESOURCES_DEBUG test-pid-rpath.txt;pid-rpath-test-dir CACHE INTERNAL "")
  set(pid-rpath_rpath-crash-example_BINARY_NAME_DEBUG rpath-crash-example-dbg CACHE INTERNAL "")
  set(pid-rpath_rpath-crash-example_RUNTIME_RESOURCES_DEBUG pid-rpath-test-dir CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_BINARY_NAME_DEBUG check-macros-ok-dbg CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_RUNTIME_RESOURCES_DEBUG test-pid-rpath.txt;pid-rpath-test-dir CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_BINARY_NAME_DEBUG check-macros-ko-dbg CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_RUNTIME_RESOURCES_DEBUG test-pid-rpath.txt;pid-rpath-test-dir CACHE INTERNAL "")
  #### declaration package internal component dependencies in Debug mode ####
  set(pid-rpath_rpath-example_INTERNAL_DEPENDENCIES_DEBUG rpathlib CACHE INTERNAL "")
  set(pid-rpath_rpath-example_INTERNAL_EXPORT_rpathlib_DEBUG FALSE CACHE INTERNAL "")
  set(pid-rpath_rpath-crash-example_INTERNAL_DEPENDENCIES_DEBUG rpathlib CACHE INTERNAL "")
  set(pid-rpath_rpath-crash-example_INTERNAL_EXPORT_rpathlib_DEBUG FALSE CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_INTERNAL_DEPENDENCIES_DEBUG rpathlib CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_INTERNAL_EXPORT_rpathlib_DEBUG FALSE CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_INTERNAL_DEPENDENCIES_DEBUG rpathlib CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_INTERNAL_EXPORT_rpathlib_DEBUG FALSE CACHE INTERNAL "")
  #### declaration of component dependencies in Debug mode ####
  set(pid-rpath_check-macros-ok_DEPENDENCIES_DEBUG pid-benchmark-for-tests CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_DEPENDENCY_pid-benchmark-for-tests_COMPONENTS_DEBUG pid-benchmark-sh CACHE INTERNAL "")
  set(pid-rpath_check-macros-ok_EXPORT_pid-benchmark-for-tests_pid-benchmark-sh_DEBUG FALSE CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_DEPENDENCIES_DEBUG pid-benchmark-for-tests CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_DEPENDENCY_pid-benchmark-for-tests_COMPONENTS_DEBUG pid-benchmark-sh CACHE INTERNAL "")
  set(pid-rpath_check-macros-ko_EXPORT_pid-benchmark-for-tests_pid-benchmark-sh_DEBUG FALSE CACHE INTERNAL "")

The use file describes most of informations for release and debug modes separately as sometimes there may have some little variations between the two modes.


The use file describes the platforms constraints applying to this version of the package for the target platform:

.. code-block:: cmake

  set(pid-rpath_PLATFORM x86_64_linux_stdc++11 CACHE INTERNAL "")
  set(pid-rpath_PLATFORM_CONFIGURATIONS posix CACHE INTERNAL "")

The target platform is `x86_64_linux_stdc++11` and the only required configuration is `posix`.

The use file also describes package dependencies (either native or external) for the given version of the package. For instance the `pid-rpath` package depends on `boost` external package with exact version `1.55.0`:

.. code-block:: cmake

  set(pid-rpath_EXTERNAL_DEPENDENCIES boost CACHE INTERNAL "")
  set(pid-rpath_EXTERNAL_DEPENDENCY_boost_VERSION 1.55.0 CACHE INTERNAL "")
  set(pid-rpath_EXTERNAL_DEPENDENCY_boost_VERSION_EXACT TRUE CACHE INTERNAL "")

The use file also contains a full description of all components defined by the `pid-rpath` package, for instance the variables for the `rpathlib` library are:

.. code-block:: cmake

  set(pid-rpath_rpathlib_TYPE SHARED CACHE INTERNAL "")
  set(pid-rpath_rpathlib_HEADER_DIR_NAME rpathlib CACHE INTERNAL "")
  set(pid-rpath_rpathlib_HEADERS pid/rpath_resolver.h;pid/rpath.h;pid/pid_path.h CACHE INTERNAL "")
  set(pid-rpath_rpathlib_BINARY_NAME librpathlib.so CACHE INTERNAL "")
  set(pid-rpath_rpathlib_INC_DIRS  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_OPTS  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_DEFS  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_LINKS  CACHE INTERNAL "")
  set(pid-rpath_rpathlib_PRIVATE_LINKS <boost>/lib/libboost_system.so.1.55.0;<boost>/lib/libboost_filesystem.so.1.55.0 CACHE INTERNAL "")
  set(pid-rpath_rpathlib_C_STANDARD 90 CACHE INTERNAL "")
  set(pid-rpath_rpathlib_CXX_STANDARD 98 CACHE INTERNAL "")
  set(pid-rpath_rpathlib_RUNTIME_RESOURCES  CACHE INTERNAL "")

They define where to find its type, its headers, its binary name, the C++ language standard in use, etc. From these informations, other package can configure their own components to use the `rpathlib` library.

The find file of a package is generated by native package or external package wrapper projects, from their CMake description, any time the project is configured. It is installed in the package install tree, at the end of each build.

External packages' use files have a different syntax, that rely on a specific API. This API can be used directly by someone that wants to directly write the use file for a given version of a binary package. Otherwise, external packages wrappers generate code based on this API.

Here is the code of the external package `boost` version 1.63.0 for platform `x86_64_linux_stdc++11`:

.. code-block:: cmake

  #############################################
  #description of boost content (version 1.64.0)
  declare_PID_External_Package(PACKAGE boost)
  #description of external package boost version 1.64.0 required platform configurations
  check_PID_External_Package_Platform(PACKAGE boost PLATFORM x86_64_linux_stdc++11 CONFIGURATION posix)
  #description of external package boost dependencies for version 1.64.0
  #description of external package boost version 1.64.0 components
  #component boost-headers
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-headers SHARED_LINKS -lpthread -lrt -ldl -lm INCLUDES include)
  #component boost-atomic
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-atomic SHARED_LINKS lib/libboost_atomic.so.1.64.0)
  #declaring internal dependencies for component boost-atomic
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-atomic EXPORT boost-headers)
  #component boost-system
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-system SHARED_LINKS lib/libboost_system.so.1.64.0)
  #declaring internal dependencies for component boost-system
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-system EXPORT boost-headers)
  #component boost-serialize
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-serialize SHARED_LINKS lib/libboost_wserialization.so.1.64.0 lib/libboost_serialization.so.1.64.0)
  #declaring internal dependencies for component boost-serialize
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-serialize EXPORT boost-headers)
  #component boost-regex
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-regex SHARED_LINKS lib/libboost_regex.so.1.64.0)
  #declaring internal dependencies for component boost-regex
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-regex EXPORT boost-headers)
  #component boost-random
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-random SHARED_LINKS lib/libboost_random.so.1.64.0)
  #declaring internal dependencies for component boost-random
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-random EXPORT boost-headers)
  #component boost-signals
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-signals SHARED_LINKS lib/libboost_signals.so.1.64.0)
  #declaring internal dependencies for component boost-signals
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-signals EXPORT boost-headers)
  #component boost-options
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-options SHARED_LINKS lib/libboost_program_options.so.1.64.0)
  #declaring internal dependencies for component boost-options
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-options EXPORT boost-headers)
  #component boost-exec
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-exec SHARED_LINKS lib/libboost_prg_exec_monitor.so.1.64.0)
  #declaring internal dependencies for component boost-exec
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-exec EXPORT boost-headers)
  #component boost-context
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-context SHARED_LINKS lib/libboost_context.so.1.64.0)
  #declaring internal dependencies for component boost-context
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-context EXPORT boost-headers)
  #component boost-date
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-date SHARED_LINKS lib/libboost_date_time.so.1.64.0)
  #declaring internal dependencies for component boost-date
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-date EXPORT boost-headers)
  #component boost-math
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-math SHARED_LINKS lib/libboost_math_tr1f.so.1.64.0 lib/libboost_math_tr1l.so.1.64.0 lib/libboost_math_tr1.so.1.64.0 lib/libboost_math_c99.so.1.64.0 lib/libboost_math_c99l.so.1.64.0 lib/libboost_math_c99f.so.1.64.0)
  #declaring internal dependencies for component boost-math
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-math EXPORT boost-headers)
  #component boost-utest
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-utest SHARED_LINKS lib/libboost_unit_test_framework.so.1.64.0)
  #declaring internal dependencies for component boost-utest
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-utest EXPORT boost-headers)
  #component boost-filesystem
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-filesystem SHARED_LINKS lib/libboost_filesystem.so.1.64.0)
  #declaring internal dependencies for component boost-filesystem
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-filesystem EXPORT boost-system)
  #component boost-chrono
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-chrono SHARED_LINKS lib/libboost_chrono.so.1.64.0)
  #declaring internal dependencies for component boost-chrono
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-chrono EXPORT boost-system)
  #component boost-thread
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-thread SHARED_LINKS lib/libboost_thread.so.1.64.0)
  #declaring internal dependencies for component boost-thread
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-thread EXPORT boost-system)
  #component boost-locale
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-locale SHARED_LINKS lib/libboost_locale.so.1.64.0)
  #declaring internal dependencies for component boost-locale
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-locale EXPORT boost-system)
  #component boost-timer
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-timer SHARED_LINKS lib/libboost_timer.so.1.64.0)
  #declaring internal dependencies for component boost-timer
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-timer EXPORT boost-chrono)
  #component boost-graph
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-graph SHARED_LINKS lib/libboost_graph.so.1.64.0)
  #declaring internal dependencies for component boost-graph
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-graph EXPORT boost-regex)
  #component boost-coroutine
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-coroutine SHARED_LINKS lib/libboost_coroutine.so.1.64.0)
  #declaring internal dependencies for component boost-coroutine
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-coroutine EXPORT boost-system)
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-coroutine EXPORT boost-context)
  #component boost-wave
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-wave SHARED_LINKS lib/libboost_wave.so.1.64.0)
  #declaring internal dependencies for component boost-wave
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-wave EXPORT boost-thread)
  #component boost-log
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-log SHARED_LINKS lib/libboost_log_setup.so.1.64.0 lib/libboost_log.so.1.64.0)
  #declaring internal dependencies for component boost-log
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-log EXPORT boost-thread)
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-log EXPORT boost-filesystem)
  #component boost-container
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-container SHARED_LINKS lib/libboost_container.so.1.64.0)
  #declaring internal dependencies for component boost-container
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-container EXPORT boost-headers)
  #component boost-type-erasure
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-type-erasure SHARED_LINKS lib/libboost_type_erasure.so.1.64.0)
  #declaring internal dependencies for component boost-type-erasure
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-type-erasure EXPORT boost-headers)
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-type-erasure EXPORT boost-system)
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-type-erasure EXPORT boost-chrono)
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-type-erasure EXPORT boost-thread)
  #component boost-iostreams
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-iostreams SHARED_LINKS lib/libboost_iostreams.so.1.64.0)
  #declaring internal dependencies for component boost-iostreams
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-iostreams EXPORT boost-headers)
  #component boost-fiber
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-fiber SHARED_LINKS lib/libboost_fiber.so.1.64.0)
  #declaring internal dependencies for component boost-fiber
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-fiber EXPORT boost-headers)
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-fiber EXPORT boost-context)
  #component boost-python
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-python SHARED_LINKS lib/libboost_python.so.1.64.0 lib/libboost_numpy.so.1.64.0)
  #declaring internal dependencies for component boost-python
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-python EXPORT boost-headers)
  #component boost-python3
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-python3 SHARED_LINKS lib/libboost_python3.so.1.64.0 lib/libboost_numpy3.so.1.64.0)
  #declaring internal dependencies for component boost-python3
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-python3 EXPORT boost-headers)

The description follows the same logic as for the description of native package content, declaring components ans their dependencies. This description will be interpreted by each native package using (directly or undirectly) the boost package. The first line found in the file is mandatory to declare the description of the external package:

.. code-block:: cmake

  #description of boost content (version 1.64.0)
  declare_PID_External_Package(PACKAGE boost)

The description of components is made using the two functions `declare_PID_External_Component` and  `declare_PID_External_Component_Dependency`, for instance the component `boost-system` is defined with a binary and depends on the interfaces provided in component `boost-headers`:


.. code-block:: cmake

  #component boost-system
  declare_PID_External_Component(PACKAGE boost COMPONENT boost-system SHARED_LINKS lib/libboost_system.so.1.64.0)
  #declaring internal dependencies for component boost-system
  declare_PID_External_Component_Dependency(PACKAGE boost COMPONENT boost-system EXPORT boost-headers)


Each component is bound to a set of binaries contained in the external project version folder and the path to these binaries are referenced relative to this folder.
Also, those descriptions can contain dependencies to other external packages (not native ones) and can also contain checks for platform configuration, in this example boost package requires `posix` configuration:

.. code-block:: cmake

  #description of external package boost version 1.64.0 required platform configurations
  check_PID_External_Package_Platform(PACKAGE boost PLATFORM x86_64_linux_stdc++11 CONFIGURATION posix)
