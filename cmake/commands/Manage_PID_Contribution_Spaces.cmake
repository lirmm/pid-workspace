#########################################################################################
#       This file is part of the program PID                                            #
#       Program description : build system supportting the PID methodology              #
#       Copyright (C) Robin Passama, LIRMM (Laboratoire d'Informatique de Robotique     #
#       et de Microelectronique de Montpellier). All Right reserved.                    #
#                                                                                       #
#       This software is free software: you can redistribute it and/or modify           #
#       it under the terms of the CeCILL-C license as published by                      #
#       the CEA CNRS INRIA, either version 1                                            #
#       of the License, or (at your option) any later version.                          #
#       This software is distributed in the hope that it will be useful,                #
#       but WITHOUT ANY WARRANTY; without even the implied warranty of                  #
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                    #
#       CeCILL-C License for more details.                                              #
#                                                                                       #
#       You can find the complete license description on the official website           #
#       of the CeCILL licenses family (http://www.cecill.info/index.en.html)            #
#########################################################################################

list(APPEND CMAKE_MODULE_PATH ${WORKSPACE_DIR}/cmake)
include(PID_Set_Modules_Path NO_POLICY_SCOPE)
include(PID_Set_Policies NO_POLICY_SCOPE)
include(PID_Utils_Functions NO_POLICY_SCOPE)
include(PID_Git_Functions NO_POLICY_SCOPE)
include(PID_Contribution_Space_Functions NO_POLICY_SCOPE)

function(find_In_CS_List FOUND cs)
  list(FIND CONTRIBUTION_SPACES ${cs} INDEX)
  if(INDEX EQUAL -1)#already registered
    set(${FOUND} FALSE PARENT_SCOPE)
  else()
    set(${FOUND} TRUE PARENT_SCOPE)
endif()
endfunction(find_In_CS_List)

if(NOT TARGET_COMMAND AND DEFINED ENV{cmd})
	set(TARGET_COMMAND $ENV{cmd} CACHE INTERNAL "" FORCE)
endif()
if(DEFINED ENV{cmd})
	unset(ENV{cmd})
endif()

if(NOT TARGET_CS AND DEFINED ENV{space})
	set(TARGET_CS $ENV{space} CACHE INTERNAL "" FORCE)
endif()
if(DEFINED ENV{space})
	unset(ENV{space})
endif()

if(NOT UPDATE_URL AND DEFINED ENV{update})
	set(UPDATE_URL $ENV{update} CACHE INTERNAL "" FORCE)
endif()
if(DEFINED ENV{update})
	unset(ENV{update})
endif()

if(NOT PUBLISH_URL AND DEFINED ENV{publish})
	set(PUBLISH_URL $ENV{publish} CACHE INTERNAL "" FORCE)
endif()
if(DEFINED ENV{publish})
	unset(ENV{publish})
endif()

if(NOT SOURCE_CS AND DEFINED ENV{from})
	set(SOURCE_CS $ENV{from} CACHE INTERNAL "" FORCE)
endif()
if(DEFINED ENV{from})
	unset(ENV{from})
endif()

if(NOT CONTENT_TO_OPERATE AND DEFINED ENV{content})
	set(CONTENT_TO_OPERATE $ENV{content} CACHE INTERNAL "" FORCE)
endif()
if(DEFINED ENV{content})
	unset(ENV{content})
endif()

read_Contribution_Spaces_Description_File(SUCCESS)#get the current list of contribution spaces
if(NOT SUCCESS
  OR NOT CONTRIBUTION_SPACES)
  message(FATAL_ERROR "[PID] ERROR : no contribution space in use, please configure again your workspace.")
endif()

set(cmd_list "ls|add|rm|reset|churl|prio_max|prio_min|move|copy|publish|update|status|delete")
if(NOT TARGET_COMMAND)
  message(FATAL_ERROR "[PID] ERROR : no command defined when managing contribution spaces. Use cmd argument with a value chosen among ${cmd_list}.")
elseif(NOT TARGET_COMMAND MATCHES "^${cmd_list}$")
  message(FATAL_ERROR "[PID] ERROR :when managing contribution spaces, command ${TARGET_COMMAND} is unknown. Use cmd argument with a value chosen among ${cmd_list}.")
elseif(NOT TARGET_COMMAND MATCHES "^ls|reset$")
  if(NOT TARGET_CS)
    list(GET CONTRIBUTION_SPACES 0 prio_max_cs)
    set(TARGET_CS ${prio_max_cs} CACHE INTERNAL "" FORCE)
    message(WARNING "[PID] WARNING :when managing contribution spaces, no target contribution space defined (use space argument). Contribution space with greater priority (${TARGET_CS}) will be used.")
  endif()
  if(TARGET_COMMAND STREQUAL "add")
    if(NOT UPDATE_URL AND NOT PUBLISH_URL)
      message(FATAL_ERROR "[PID] ERROR :when managing contribution spaces, command add requires either argument update (url where to get last updates of the contribution space) or argument publish (to allow write acces in contribution space) to be defined.")
    endif()
  elseif(TARGET_COMMAND STREQUAL "churl")
    if(NOT PUBLISH_URL)
      message(FATAL_ERROR "[PID] ERROR :when managing contribution spaces, command churl requires argument publish (url used to publish updates) to be defined.")
    endif()
  elseif(TARGET_COMMAND MATCHES "^move|copy|delete$")
    if(NOT CONTENT_TO_OPERATE)
      message(FATAL_ERROR "[PID] ERROR :when managing contribution spaces, command ${TARGET_COMMAND} requires argument content to be defined.")
    endif()
    if(TARGET_COMMAND MATCHES "^move|copy$")
      if(NOT SOURCE_CS)
        message(FATAL_ERROR "[PID] ERROR :when managing contribution spaces, command ${TARGET_COMMAND} requires argument from to be defined.")
      endif()
    endif()
  endif()
endif()

set(reconfigure FALSE)#by default do nto reconfigure the workspace
if(TARGET_COMMAND STREQUAL "ls")
  message("  Following contribution spaces are ordered from highest to lowest priority contribution space.")
  message("  Edit the file ${WORKSPACE_DIR}/contributions/contribution_spaces_list_cmake to change priorities.")
  foreach(cs IN LISTS CONTRIBUTION_SPACES)
    message("    - ${cs}")
    message("      update=${CONTRIBUTION_SPACE_${cs}_UPDATE_REMOTE}")
    message("      publish=${CONTRIBUTION_SPACE_${cs}_PUBLISH_REMOTE}")
  endforeach()
elseif(TARGET_COMMAND STREQUAL "reset")
  set(CONTRIBUTION_SPACES CACHE INTERNAL "")
  set(reconfigure TRUE)
elseif(TARGET_COMMAND STREQUAL "rm")
  find_In_CS_List(FOUND ${TARGET_CS})
  if(NOT FOUND)
    message("[PID] ERROR : cannot remove ${TARGET_CS} to contribution spaces because this contribution space is not used.")
    return()
  endif()
  set(temp_list ${CONTRIBUTION_SPACES})
  list(REMOVE_ITEM temp_list ${TARGET_CS})
  set(CONTRIBUTION_SPACES ${temp_list} CACHE INTERNAL "")
  if(TARGET_CS STREQUAL "pid")#specific case we ask for suppression of pid official contribution
    # meaning we simply want to reset it to its original configuration
    #it can still contains unpublished commits so we need to remove it and the configuration
    # process will automatically reinstall it from original settings (official remotes)
    file (REMOVE_RECURSE ${WORKSPACE_DIR}/contributions/pid)
  endif()
  set(reconfigure TRUE)
elseif(TARGET_COMMAND STREQUAL "add")
  find_In_CS_List(FOUND ${TARGET_CS})
  if(FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot add ${TARGET_CS} to contribution spaces since this contribution space is already used.")
  endif()
  add_Contribution_Space(${TARGET_CS} "${UPDATE_URL}" "${PUBLISH_URL}")
  set(reconfigure TRUE)
elseif(TARGET_COMMAND STREQUAL "churl")
  find_In_CS_List(FOUND ${TARGET_CS})
  if(NOT FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot change url of ${TARGET_CS} because this contribution space is not used.")
  endif()
  #set the publish URL
  set(CONTRIBUTION_SPACE_${TARGET_CS}_PUBLISH_REMOTE ${PUBLISH_URL} CACHE INTERNAL "")
  if(UPDATE_URL)
    set(CONTRIBUTION_SPACE_${TARGET_CS}_UPDATE_REMOTE ${UPDATE_URL} CACHE INTERNAL "")
  endif()
  set(reconfigure TRUE)
elseif(TARGET_COMMAND MATCHES "^prio_max|prio_min$")
  find_In_CS_List(FOUND ${TARGET_CS})
  if(NOT FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot change priority of ${TARGET_CS} because this contribution space is not used.")
  endif()
  #set the publish URL
  set(temp_list ${CONTRIBUTION_SPACES})
  list(REMOVE_ITEM temp_list ${TARGET_CS})
  #depending on the priority put at beggining or end of the list
  if(TARGET_COMMAND MATCHES "prio_max")
    set(temp_list ${TARGET_CS} ${temp_list})
  else()
    list(APPEND temp_list ${TARGET_CS})
  endif()
  set(CONTRIBUTION_SPACES ${temp_list} CACHE INTERNAL "")
  set(reconfigure TRUE)
elseif(TARGET_COMMAND STREQUAL "publish")
  find_In_CS_List(FOUND ${TARGET_CS})
  if(NOT FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot publish content from ${TARGET_CS} because this contribution space is not used.")
  endif()
  publish_All_In_Contribution_Space_Repository(${TARGET_CS})
elseif(TARGET_COMMAND STREQUAL "update")
  find_In_CS_List(FOUND ${TARGET_CS})
  if(NOT FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot update content of ${TARGET_CS} because this contribution space is not used.")
  endif()
  update_Contribution_Space_Repository(${TARGET_CS})
elseif(TARGET_COMMAND STREQUAL "status")
  find_In_CS_List(FOUND ${TARGET_CS})
  if(NOT FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot update content of ${TARGET_CS} because this contribution space is not used.")
  endif()
  get_Contribution_Space_Repository_Status(${TARGET_CS})
elseif(TARGET_COMMAND STREQUAL "move")
  find_In_CS_List(FOUND ${TARGET_CS})
  if(NOT FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot move references in ${TARGET_CS} because this contribution space is not used.")
  endif()
  find_In_CS_List(FOUND ${SOURCE_CS})
  if(NOT FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot move references from ${SOURCE_CS} because this contribution space is not used.")
  endif()
  get_Path_To_Contribution_Space(SOURCE_PATH ${SOURCE_CS})
  get_Path_To_Contribution_Space(TARGET_PATH ${TARGET_CS})
  get_All_Matching_Contributions(LICENSE REFERENCE FIND FORMAT PLUGIN ${SOURCE_CS} ${CONTENT_TO_OPERATE})
  if(LICENSE)
    if(NOT EXISTS ${TARGET_PATH}/licenses)
      file(MAKE_DIRECTORY ${TARGET_PATH}/licenses)
    endif()
    file(RENAME ${SOURCE_PATH}/licenses/${LICENSE} ${TARGET_PATH}/licenses/${LICENSE})
  endif()
  if(REFERENCE)
    if(NOT EXISTS ${TARGET_PATH}/references)
      file(MAKE_DIRECTORY ${TARGET_PATH}/references)
    endif()
    file(RENAME ${SOURCE_PATH}/references/${REFERENCE} ${TARGET_PATH}/references/${REFERENCE})
  endif()
  if(FIND)
    if(NOT EXISTS ${TARGET_PATH}/finds)
      file(MAKE_DIRECTORY ${TARGET_PATH}/finds)
    endif()
    file(RENAME ${SOURCE_PATH}/finds/${FIND} ${TARGET_PATH}/finds/${FIND})
  endif()
  if(FORMAT)
    if(NOT EXISTS ${TARGET_PATH}/formats)
      file(MAKE_DIRECTORY ${TARGET_PATH}/formats)
    endif()
    file(RENAME ${SOURCE_PATH}/formats/${FORMAT} ${TARGET_PATH}/formats/${FORMAT})
  endif()
  if(PLUGIN)
    if(NOT EXISTS ${TARGET_PATH}/plugins)
      file(MAKE_DIRECTORY ${TARGET_PATH}/plugins)
    endif()
    file(RENAME ${SOURCE_PATH}/plugins/${PLUGIN} ${TARGET_PATH}/plugins/${PLUGIN})
  endif()
elseif(TARGET_COMMAND STREQUAL "copy")
  find_In_CS_List(FOUND ${TARGET_CS})
  if(NOT FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot copy contributions in ${TARGET_CS} because this contribution space is not used.")
  endif()
  find_In_CS_List(FOUND ${SOURCE_CS})
  if(NOT FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot copy contributions from ${SOURCE_CS} because this contribution space is not used.")
  endif()
  get_Path_To_Contribution_Space(SOURCE_PATH ${SOURCE_CS})
  get_Path_To_Contribution_Space(TARGET_PATH ${TARGET_CS})
  get_All_Matching_Contributions(LICENSE REFERENCE FIND FORMAT PLUGIN ${SOURCE_CS} ${CONTENT_TO_OPERATE})
  if(LICENSE)
    if(NOT EXISTS ${TARGET_PATH}/licenses)
      file(MAKE_DIRECTORY ${TARGET_PATH}/licenses)
    endif()
    file(COPY ${SOURCE_PATH}/licenses/${LICENSE} DESTINATION ${TARGET_PATH}/licenses)
  endif()
  if(REFERENCE)
    if(NOT EXISTS ${TARGET_PATH}/references)
      file(MAKE_DIRECTORY ${TARGET_PATH}/references)
    endif()
    file(COPY ${SOURCE_PATH}/references/${REFERENCE} DESTINATION ${TARGET_PATH}/references)
  endif()
  if(FIND)
    if(NOT EXISTS ${TARGET_PATH}/finds)
      file(MAKE_DIRECTORY ${TARGET_PATH}/finds)
    endif()
    file(COPY ${SOURCE_PATH}/finds/${FIND} DESTINATION ${TARGET_PATH}/finds)
  endif()
  if(FORMAT)
    if(NOT EXISTS ${TARGET_PATH}/formats)
      file(MAKE_DIRECTORY ${TARGET_PATH}/formats)
    endif()
    file(COPY ${SOURCE_PATH}/formats/${FORMAT} DESTINATION ${TARGET_PATH}/formats)
  endif()
  if(PLUGIN)
    if(NOT EXISTS ${TARGET_PATH}/plugins)
      file(MAKE_DIRECTORY ${TARGET_PATH}/plugins)
    endif()
    file(COPY ${SOURCE_PATH}/plugins/${PLUGIN} DESTINATION ${TARGET_PATH}/plugins)
  endif()
elseif(TARGET_COMMAND STREQUAL "delete")
  find_In_CS_List(FOUND ${TARGET_CS})
  if(NOT FOUND)
    message(FATAL_ERROR "[PID] ERROR : cannot delete contributions in ${TARGET_CS} because this contribution space is not used.")
  endif()
  get_Path_To_Contribution_Space(TARGET_PATH ${TARGET_CS})
  get_All_Matching_Contributions(LICENSE REFERENCE FIND FORMAT PLUGIN ${TARGET_CS} ${CONTENT_TO_OPERATE})
  if(LICENSE)
    file(REMOVE ${TARGET_PATH}/licenses/${LICENSE})
  endif()
  if(REFERENCE)
    file(REMOVE ${TARGET_PATH}/references/${REFERENCE})
  endif()
  if(FIND)
    file(REMOVE ${TARGET_PATH}/finds/${FIND})
  endif()
  if(FORMAT)
    file(REMOVE ${TARGET_PATH}/formats/${FORMAT})
  endif()
  if(PLUGIN)
    file(REMOVE_RECURSE ${TARGET_PATH}/plugins/${PLUGIN})
  endif()
endif()
if(reconfigure)
  #finally update the file and reconfigure the workspace
  write_Contribution_Spaces_Description_File()
  execute_process(COMMAND ${CMAKE_COMMAND} .. WORKING_DIRECTORY ${WORKSPACE_DIR}/build)#reconfigure the workspace
endif()
